// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package xfs

import (
	"io/fs"
	"sync"
	"time"
)

// Ensure, that FileInfoMock does implement FileInfo.
// If this is not the case, regenerate this file with moq.
var _ FileInfo = &FileInfoMock{}

// FileInfoMock is a mock implementation of FileInfo.
//
//	func TestSomethingThatUsesFileInfo(t *testing.T) {
//
//		// make and configure a mocked FileInfo
//		mockedFileInfo := &FileInfoMock{
//			IsDirFunc: func() bool {
//				panic("mock out the IsDir method")
//			},
//			ModTimeFunc: func() time.Time {
//				panic("mock out the ModTime method")
//			},
//			ModeFunc: func() fs.FileMode {
//				panic("mock out the Mode method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			SizeFunc: func() int64 {
//				panic("mock out the Size method")
//			},
//			SysFunc: func() any {
//				panic("mock out the Sys method")
//			},
//		}
//
//		// use mockedFileInfo in code that requires FileInfo
//		// and then make assertions.
//
//	}
type FileInfoMock struct {
	// IsDirFunc mocks the IsDir method.
	IsDirFunc func() bool

	// ModTimeFunc mocks the ModTime method.
	ModTimeFunc func() time.Time

	// ModeFunc mocks the Mode method.
	ModeFunc func() fs.FileMode

	// NameFunc mocks the Name method.
	NameFunc func() string

	// SizeFunc mocks the Size method.
	SizeFunc func() int64

	// SysFunc mocks the Sys method.
	SysFunc func() any

	// calls tracks calls to the methods.
	calls struct {
		// IsDir holds details about calls to the IsDir method.
		IsDir []struct {
		}
		// ModTime holds details about calls to the ModTime method.
		ModTime []struct {
		}
		// Mode holds details about calls to the Mode method.
		Mode []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Size holds details about calls to the Size method.
		Size []struct {
		}
		// Sys holds details about calls to the Sys method.
		Sys []struct {
		}
	}
	lockIsDir   sync.RWMutex
	lockModTime sync.RWMutex
	lockMode    sync.RWMutex
	lockName    sync.RWMutex
	lockSize    sync.RWMutex
	lockSys     sync.RWMutex
}

// IsDir calls IsDirFunc.
func (mock *FileInfoMock) IsDir() bool {
	if mock.IsDirFunc == nil {
		panic("FileInfoMock.IsDirFunc: method is nil but FileInfo.IsDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsDir.Lock()
	mock.calls.IsDir = append(mock.calls.IsDir, callInfo)
	mock.lockIsDir.Unlock()
	return mock.IsDirFunc()
}

// IsDirCalls gets all the calls that were made to IsDir.
// Check the length with:
//
//	len(mockedFileInfo.IsDirCalls())
func (mock *FileInfoMock) IsDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsDir.RLock()
	calls = mock.calls.IsDir
	mock.lockIsDir.RUnlock()
	return calls
}

// ModTime calls ModTimeFunc.
func (mock *FileInfoMock) ModTime() time.Time {
	if mock.ModTimeFunc == nil {
		panic("FileInfoMock.ModTimeFunc: method is nil but FileInfo.ModTime was just called")
	}
	callInfo := struct {
	}{}
	mock.lockModTime.Lock()
	mock.calls.ModTime = append(mock.calls.ModTime, callInfo)
	mock.lockModTime.Unlock()
	return mock.ModTimeFunc()
}

// ModTimeCalls gets all the calls that were made to ModTime.
// Check the length with:
//
//	len(mockedFileInfo.ModTimeCalls())
func (mock *FileInfoMock) ModTimeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockModTime.RLock()
	calls = mock.calls.ModTime
	mock.lockModTime.RUnlock()
	return calls
}

// Mode calls ModeFunc.
func (mock *FileInfoMock) Mode() fs.FileMode {
	if mock.ModeFunc == nil {
		panic("FileInfoMock.ModeFunc: method is nil but FileInfo.Mode was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMode.Lock()
	mock.calls.Mode = append(mock.calls.Mode, callInfo)
	mock.lockMode.Unlock()
	return mock.ModeFunc()
}

// ModeCalls gets all the calls that were made to Mode.
// Check the length with:
//
//	len(mockedFileInfo.ModeCalls())
func (mock *FileInfoMock) ModeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMode.RLock()
	calls = mock.calls.Mode
	mock.lockMode.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *FileInfoMock) Name() string {
	if mock.NameFunc == nil {
		panic("FileInfoMock.NameFunc: method is nil but FileInfo.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedFileInfo.NameCalls())
func (mock *FileInfoMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Size calls SizeFunc.
func (mock *FileInfoMock) Size() int64 {
	if mock.SizeFunc == nil {
		panic("FileInfoMock.SizeFunc: method is nil but FileInfo.Size was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSize.Lock()
	mock.calls.Size = append(mock.calls.Size, callInfo)
	mock.lockSize.Unlock()
	return mock.SizeFunc()
}

// SizeCalls gets all the calls that were made to Size.
// Check the length with:
//
//	len(mockedFileInfo.SizeCalls())
func (mock *FileInfoMock) SizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSize.RLock()
	calls = mock.calls.Size
	mock.lockSize.RUnlock()
	return calls
}

// Sys calls SysFunc.
func (mock *FileInfoMock) Sys() any {
	if mock.SysFunc == nil {
		panic("FileInfoMock.SysFunc: method is nil but FileInfo.Sys was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSys.Lock()
	mock.calls.Sys = append(mock.calls.Sys, callInfo)
	mock.lockSys.Unlock()
	return mock.SysFunc()
}

// SysCalls gets all the calls that were made to Sys.
// Check the length with:
//
//	len(mockedFileInfo.SysCalls())
func (mock *FileInfoMock) SysCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSys.RLock()
	calls = mock.calls.Sys
	mock.lockSys.RUnlock()
	return calls
}
