// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package xfs

import (
	"io/fs"
	"sync"
)

// Ensure, that FSMock does implement FS.
// If this is not the case, regenerate this file with moq.
var _ FS = &FSMock{}

// FSMock is a mock implementation of FS.
//
//	func TestSomethingThatUsesFS(t *testing.T) {
//
//		// make and configure a mocked FS
//		mockedFS := &FSMock{
//			OpenFunc: func(name string) (fs.File, error) {
//				panic("mock out the Open method")
//			},
//		}
//
//		// use mockedFS in code that requires FS
//		// and then make assertions.
//
//	}
type FSMock struct {
	// OpenFunc mocks the Open method.
	OpenFunc func(name string) (fs.File, error)

	// calls tracks calls to the methods.
	calls struct {
		// Open holds details about calls to the Open method.
		Open []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockOpen sync.RWMutex
}

// Open calls OpenFunc.
func (mock *FSMock) Open(name string) (fs.File, error) {
	if mock.OpenFunc == nil {
		panic("FSMock.OpenFunc: method is nil but FS.Open was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockOpen.Lock()
	mock.calls.Open = append(mock.calls.Open, callInfo)
	mock.lockOpen.Unlock()
	return mock.OpenFunc(name)
}

// OpenCalls gets all the calls that were made to Open.
// Check the length with:
//
//	len(mockedFS.OpenCalls())
func (mock *FSMock) OpenCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockOpen.RLock()
	calls = mock.calls.Open
	mock.lockOpen.RUnlock()
	return calls
}
