// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package xfs

import (
	"io/fs"
	"sync"
)

// Ensure, that FileMock does implement File.
// If this is not the case, regenerate this file with moq.
var _ File = &FileMock{}

// FileMock is a mock implementation of File.
//
//	func TestSomethingThatUsesFile(t *testing.T) {
//
//		// make and configure a mocked File
//		mockedFile := &FileMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ReadFunc: func(bytes []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//			StatFunc: func() (fs.FileInfo, error) {
//				panic("mock out the Stat method")
//			},
//		}
//
//		// use mockedFile in code that requires File
//		// and then make assertions.
//
//	}
type FileMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ReadFunc mocks the Read method.
	ReadFunc func(bytes []byte) (int, error)

	// StatFunc mocks the Stat method.
	StatFunc func() (fs.FileInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Bytes is the bytes argument value.
			Bytes []byte
		}
		// Stat holds details about calls to the Stat method.
		Stat []struct {
		}
	}
	lockClose sync.RWMutex
	lockRead  sync.RWMutex
	lockStat  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *FileMock) Close() error {
	if mock.CloseFunc == nil {
		panic("FileMock.CloseFunc: method is nil but File.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedFile.CloseCalls())
func (mock *FileMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *FileMock) Read(bytes []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("FileMock.ReadFunc: method is nil but File.Read was just called")
	}
	callInfo := struct {
		Bytes []byte
	}{
		Bytes: bytes,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(bytes)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedFile.ReadCalls())
func (mock *FileMock) ReadCalls() []struct {
	Bytes []byte
} {
	var calls []struct {
		Bytes []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Stat calls StatFunc.
func (mock *FileMock) Stat() (fs.FileInfo, error) {
	if mock.StatFunc == nil {
		panic("FileMock.StatFunc: method is nil but File.Stat was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStat.Lock()
	mock.calls.Stat = append(mock.calls.Stat, callInfo)
	mock.lockStat.Unlock()
	return mock.StatFunc()
}

// StatCalls gets all the calls that were made to Stat.
// Check the length with:
//
//	len(mockedFile.StatCalls())
func (mock *FileMock) StatCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStat.RLock()
	calls = mock.calls.Stat
	mock.lockStat.RUnlock()
	return calls
}
